<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/01/25/hello-world/"/>
      <url>/2022/01/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BFS广度优先搜索</title>
      <link href="/2022/01/23/BFS%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
      <url>/2022/01/23/BFS%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="基础BFS"><a href="#基础BFS" class="headerlink" title="基础BFS"></a>基础BFS</h1><p>广度优先算法(Breadth-First Search，BFS)是一种通过遍历进行搜索的方法，算法经过若干次循环，每次循环会访问所有能够访问的节点，为这些新节点打上标记，并且收集这些新节点所连接的所有节点信息，供下次循环来访问，直到访问到目标节点，算法结束。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="地图数组-Map"><a href="#地图数组-Map" class="headerlink" title="地图数组 Map"></a>地图数组 Map</h3><p>地图一般用数组来描述，地图的维数并不限制，其可以用来描述<mark class="hl-label red">访问节点的方式</mark> 、<mark class="hl-label red">是否存在障碍物</mark> 等。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Map[5][9]</span></span><br><span class="line"><span class="number">010101010</span></span><br><span class="line"><span class="number">000010001</span></span><br><span class="line"><span class="number">011110110</span></span><br><span class="line"><span class="number">010000000</span></span><br><span class="line"><span class="number">000111110</span></span><br></pre></td></tr></table></figure><p>迷宫地图（入口左上角，出口右下角）的访问方式是上下左右前进1格，0表示通路，1表示障碍物。</p><h3 id="标记数组-vis"><a href="#标记数组-vis" class="headerlink" title="标记数组 vis"></a>标记数组 vis</h3><p>标记数组可以<mark class="hl-label red">避免算法访问已经访问过的节点</mark> ，其一般和Map大小相同，区别是标记数组中1代表已访问过，0代表未访问过，当算法尝试访问一个节点时，会先判断标记数组是否为0，如果不为0，就不会访问该节点。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//vis[5][9]</span></span><br><span class="line"><span class="number">100000000</span></span><br><span class="line"><span class="number">000000000</span></span><br><span class="line"><span class="number">000000000</span></span><br><span class="line"><span class="number">000000000</span></span><br><span class="line"><span class="number">000000000</span></span><br></pre></td></tr></table></figure><p>算法初始化时，迷宫入口处是已访问过的，标记为1，其他地方均为0。</p><h3 id="节点结构体-node"><a href="#节点结构体-node" class="headerlink" title="节点结构体 node"></a>节点结构体 node</h3><p>节点结构体可以<mark class="hl-label red">记录每个节点的信息</mark> ，例如：<mark class="hl-label blue">节点位置</mark> 、<mark class="hl-label blue">第一次访问到该节点所走的路径</mark> 、<mark class="hl-label blue">第一次访问到该节点所需的步数等</mark> 、<mark class="hl-label blue">从哪个节点访问到此节点</mark> 。<br>有时并不关注节点的具体信息，如判断迷宫是否有解时，如果访问到出口，便输出有解，所有节点均访问过还没访问到出口，便输出无解，不需要迷宫的走法，就没必要用结构体来描述节点。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//节点结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;    <span class="comment">//节点位置</span></span><br><span class="line">    <span class="keyword">int</span> step;   <span class="comment">//第一次访问到该节点所需步数</span></span><br><span class="line">    string s;   <span class="comment">//从第一个节点开始访问到该节点的过程，如&quot;下左下下&quot;</span></span><br><span class="line">    <span class="built_in">node</span>()&#123;&#125;;   <span class="comment">//构造函数，可以无参数生成节点</span></span><br><span class="line">    <span class="built_in">node</span>(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> step,string s):<span class="built_in">x</span>(x),<span class="built_in">y</span>(y),<span class="built_in">step</span>(step),<span class="built_in">s</span>(s)&#123;&#125;;    <span class="comment">//构造函数，可以带参数生成节点    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果只写一种构造函数，就不能用另一种构造函数来生成节点<br>带参数的构造函数可以方便操作，例如：<br>假设存在一个集合A,A.insert()可以把节点加入到A集合<br>那么可以直接通过A.insert(node(1,1,2,”下右”))把节点位置为(1,1),访问到该节点需要2步，访问的路径为”下右”(从左上方入口向下1格再向右1格)的节点加入集合A</p><h3 id="待访问节点队列-queue"><a href="#待访问节点队列-queue" class="headerlink" title="待访问节点队列 queue"></a>待访问节点队列 queue</h3><p>广度优先搜索是个循环过程，每次循环均会产生<mark class="hl-label red">下次循环所需访问的节点的集合</mark> ，下次循环时拿出这些节点依次访问，这个过程可以通过队列来实现：<br>第一次循环把入口节点加入队列，<br>如果队列不为空，从队列头弹出一个节点访问并标记，然后把该节点能访问到的节点送入队列尾，循环这个过程。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建队列</span></span><br><span class="line">queue&lt;node&gt; q;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//BFS算法所需了解的指令</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//加入队列</span></span><br><span class="line"><span class="comment">//第一次搜索时，将左上角(0,0),访问所需步数为0，访问路径为空的入口节点加入队列</span></span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">node</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&quot;&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">    <span class="keyword">do</span> someting;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//拿出队列头元素并弹出</span></span><br><span class="line">node a=q.<span class="built_in">front</span>();   <span class="comment">//将头元素赋值给a</span></span><br><span class="line">q.<span class="built_in">pop</span>();    <span class="comment">//弹出头元素</span></span><br></pre></td></tr></table></figure><h3 id="为方便而建立的数据"><a href="#为方便而建立的数据" class="headerlink" title="为方便而建立的数据"></a>为方便而建立的数据</h3><p>order字符串:方便<mark class="hl-label red">路径字符串延伸</mark> </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//order</span></span><br><span class="line">string order=<span class="string">&quot;上下左右&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//目前节点为节点now，假设now.s=&quot;下右下&quot;</span></span><br><span class="line">node now=queue.<span class="built_in">front</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问now节点四周节点,相应的s=&quot;下右下&quot;+order[i]</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;++i)</span><br><span class="line">string s=now.s+order[i];</span><br></pre></td></tr></table></figure><p>dir数组:方便<mark class="hl-label red">位置的计算</mark> (direction)</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dir[][2]</span></span><br><span class="line">dir[][<span class="number">2</span>]=&#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//目前节点为节点now,假设now.x=now.y=0</span></span><br><span class="line">node now;</span><br><span class="line">now.x=<span class="number">0</span>;now.y=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问now节点的下方节点时,相应的x=now.x+dir[i][0],y=now.y+dir[i][1]</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;++i)&#123;</span><br><span class="line">    x_next=now.x+dir[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    y_next=now.x+dir[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="算法过程"><a href="#算法过程" class="headerlink" title="算法过程"></a>算法过程</h2><ol><li>定义数据<ul><li><mark class="hl-label red">节点</mark> struct node</li><li><mark class="hl-label red">地图</mark> int Map[][]</li><li><mark class="hl-label red">标记</mark> int vis[][]</li><li><mark class="hl-label red">队列</mark> queue&lt;node&gt; q</li><li>方向字符串string order</li><li>方向数组int dir[][]</li></ul></li><li>定义函数BFS<ol><li>将入口节点加入队列，<mark class="hl-label red">并打上标记</mark> </li><li>当队列不为空时，循环执行以下过程<ol><li>取队列头元素节点，将其弹出，如果是目标节点，退出循环</li><li>遍历该节点所能访问的节点，如果遍历到的节点<mark class="hl-label red">合法</mark> ，生成节点的路径(由上一个节点的路径加访问方向产生)，步数(上一个节点的步数+1)等信息，并加入队列，<mark class="hl-label red">打上标记</mark> 。<ul><li>合法条件1:不越界，即节点位置不超出地图范围</li><li>合法条件2:不为障碍物，即节点位置不为障碍物</li><li>合法条件3:没有被访问过，即vis[节点位置]</li><li>合法条件一般为这3条，但有可能有添加</li></ul></li></ol></li></ol></li><li>主函数运行函数BFS()</li></ol><h2 id="例题《迷宫》蓝桥杯2019及代码"><a href="#例题《迷宫》蓝桥杯2019及代码" class="headerlink" title="例题《迷宫》蓝桥杯2019及代码"></a>例题《迷宫》蓝桥杯2019及代码</h2><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>本题为填空题，只需要算出结果后，在代码中使用输出语句将所填结果输出即可。</strong></p><ul><li><p>下图给出了一个迷宫的平面图，其中标记为 <strong>1</strong> 的为障碍，标记为 <strong>0</strong> 的为可以通行的地方。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">010000</span></span><br><span class="line"><span class="number">000100</span></span><br><span class="line"><span class="number">001001</span></span><br><span class="line"><span class="number">110000</span></span><br></pre></td></tr></table></figure></li><li><p>迷宫的入口为左上角，出口为右下角，在迷宫中，只能从一个位置走到它的上、下、左、右四个方向之一。对于上面的迷宫，从入口开始，可以按 <strong>DRRURRDDDR</strong> 的顺序通过迷宫， 一共 <strong>10</strong> 步。其中 <strong>D、U、L、R</strong> 分别表示向下、向上、向左、向右走。对于下面这个更复杂的迷宫（<strong>30</strong> 行 <strong>50</strong> 列），请找出一种通过迷宫的方式，其使用的步数最少，在步数最少的前提下，请找出字典序最小的一个作为答案。</p></li><li><p>请注意在字典序中 <strong>D&lt;L&lt;R&lt;U</strong>。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">01010101001011001001010110010110100100001000101010</span></span><br><span class="line"><span class="number">00001000100000101010010000100000001001100110100101</span></span><br><span class="line"><span class="number">01111011010010001000001101001011100011000000010000</span></span><br><span class="line"><span class="number">01000000001010100011010000101000001010101011001011</span></span><br><span class="line"><span class="number">00011111000000101000010010100010100000101100000000</span></span><br><span class="line"><span class="number">11001000110101000010101100011010011010101011110111</span></span><br><span class="line"><span class="number">00011011010101001001001010000001000101001110000000</span></span><br><span class="line"><span class="number">10100000101000100110101010111110011000010000111010</span></span><br><span class="line"><span class="number">00111000001010100001100010000001000101001100001001</span></span><br><span class="line"><span class="number">11000110100001110010001001010101010101010001101000</span></span><br><span class="line"><span class="number">00010000100100000101001010101110100010101010000101</span></span><br><span class="line"><span class="number">11100100101001001000010000010101010100100100010100</span></span><br><span class="line"><span class="number">00000010000000101011001111010001100000101010100011</span></span><br><span class="line"><span class="number">10101010011100001000011000010110011110110100001000</span></span><br><span class="line"><span class="number">10101010100001101010100101000010100000111011101001</span></span><br><span class="line"><span class="number">10000000101100010000101100101101001011100000000100</span></span><br><span class="line"><span class="number">10101001000000010100100001000100000100011110101001</span></span><br><span class="line"><span class="number">00101001010101101001010100011010101101110000110101</span></span><br><span class="line"><span class="number">11001010000100001100000010100101000001000111000010</span></span><br><span class="line"><span class="number">00001000110000110101101000000100101001001000011101</span></span><br><span class="line"><span class="number">10100101000101000000001110110010110101101010100001</span></span><br><span class="line"><span class="number">00101000010000110101010000100010001001000100010101</span></span><br><span class="line"><span class="number">10100001000110010001000010101001010101011111010010</span></span><br><span class="line"><span class="number">00000100101000000110010100101001000001000000000010</span></span><br><span class="line"><span class="number">11010000001001110111001001000011101001011011101000</span></span><br><span class="line"><span class="number">00000110100010001000100000001000011101000000110011</span></span><br><span class="line"><span class="number">10101000101000100010001111100010101001010000001000</span></span><br><span class="line"><span class="number">10000010100101001010110000000100101010001011101000</span></span><br><span class="line"><span class="number">00111100001000010000000110111000000001000000001011</span></span><br><span class="line"><span class="number">10000001100111010111010001000110111010101101111000</span></span><br></pre></td></tr></table></figure></li><li><p><strong>运行限制</strong></p><ul><li>最大运行时间：1s </li><li>最大运行内存: 128M</li></ul></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><strong>运行前需将迷宫复制到migong.txt中并将migong.txt放在代码cpp文件同目录下</strong><br><strong>运行前需将迷宫复制到migong.txt中并将migong.txt放在代码cpp文件同目录下</strong><br><strong>运行前需将迷宫复制到migong.txt中并将migong.txt放在代码cpp文件同目录下</strong></p><p><strong>取消注释可以看到BFS过程</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y; </span><br><span class="line"><span class="keyword">int</span> step;</span><br><span class="line">string s;</span><br><span class="line"><span class="built_in">node</span>()&#123;&#125;;</span><br><span class="line"><span class="built_in">node</span>(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> step,string s):<span class="built_in">x</span>(x),<span class="built_in">y</span>(y),<span class="built_in">step</span>(step),<span class="built_in">s</span>(s)&#123;&#125;;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">char</span> Map[<span class="number">30</span>][<span class="number">50</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">30</span>][<span class="number">50</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">string order=<span class="string">&quot;DLRU&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> dir[][<span class="number">2</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">queue&lt;node&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">node</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&quot;&quot;</span>));</span><br><span class="line">vis[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">node now=q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="comment">//cout&lt;&lt;endl; </span></span><br><span class="line"><span class="comment">//cout&lt;&lt;&quot;所在节点：&quot;&lt;&lt;now.x&lt;&lt;&quot; &quot;&lt;&lt;now.y&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;&quot;该节点路径：&quot;&lt;&lt;now.s&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(now.x==<span class="number">29</span>&amp;&amp;now.y==<span class="number">49</span>) &#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;&quot;达到出口所需步数&quot;&lt;&lt;now.step&lt;&lt;endl;</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;达到出口路径&quot;</span>&lt;&lt;now.s&lt;&lt;endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x_next=now.x+dir[i][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> y_next=now.y+dir[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(x_next&gt;<span class="number">29</span>||y_next&gt;<span class="number">49</span>||x_next&lt;<span class="number">0</span>||y_next&lt;<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(Map[x_next][y_next]==<span class="string">&#x27;1&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(vis[x_next][y_next]==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> step=now.step+<span class="number">1</span>;</span><br><span class="line">string s=now.s+order[i];</span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">node</span>(x_next,y_next,step,s));</span><br><span class="line"><span class="comment">//cout&lt;&lt;x_next&lt;&lt;&quot; &quot;&lt;&lt;y_next&lt;&lt;&quot;节点加入队列&quot;&lt;&lt;endl; </span></span><br><span class="line">vis[x_next][y_next]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">freopen</span>(<span class="string">&quot;migong.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">30</span>;i++)&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">50</span>;j++)&#123;</span><br><span class="line">  cin&gt;&gt;Map[i][j];</span><br><span class="line">  &#125;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="built_in">bfs</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>待补</p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
