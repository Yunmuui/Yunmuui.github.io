<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/01/25/hello-world/"/>
      <url>/2022/01/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BFS广度优先搜索</title>
      <link href="/2022/01/23/BFS%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
      <url>/2022/01/23/BFS%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<p>广度优先算法(Breadth-First Search，BFS)是一种通过遍历进行搜索的方法，算法经过若干次循环，每次循环会访问所有能够访问的节点，为这些新节点打上标记，并且收集这些新节点所连接的所有节点信息，供下次循环来访问，直到访问到目标节点，算法结束。</p><h1 id="所需的数据结构"><a href="#所需的数据结构" class="headerlink" title="所需的数据结构"></a>所需的数据结构</h1><h2 id="地图数组-Map"><a href="#地图数组-Map" class="headerlink" title="地图数组 Map"></a>地图数组 Map</h2><p>地图一般用数组来描述，地图的维数并不限制，其可以用来描述访问节点的方式、是否存在障碍物等。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Map[5][9]</span></span><br><span class="line"><span class="number">010101010</span></span><br><span class="line"><span class="number">000010001</span></span><br><span class="line"><span class="number">011110110</span></span><br><span class="line"><span class="number">010000000</span></span><br><span class="line"><span class="number">000111110</span></span><br></pre></td></tr></table></figure><p>迷宫地图（入口左上角，出口右下角）的访问方式是上下左右前进1格，0表示通路，1表示障碍物。</p><h2 id="标记数组-vis"><a href="#标记数组-vis" class="headerlink" title="标记数组 vis"></a>标记数组 vis</h2><p>标记数组可以避免算法访问已经访问过的节点，其一般和Map大小相同，区别是标记数组中1代表已访问过，0代表未访问过，当算法尝试访问一个节点时，会先判断标记数组是否为0，如果不为0，就不会访问该节点。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//vis[5][9]</span></span><br><span class="line"><span class="number">100000000</span></span><br><span class="line"><span class="number">000000000</span></span><br><span class="line"><span class="number">000000000</span></span><br><span class="line"><span class="number">000000000</span></span><br><span class="line"><span class="number">000000000</span></span><br></pre></td></tr></table></figure><p>算法初始化时，迷宫入口处是已访问过的，标记为1，其他地方均为0。</p><h2 id="节点结构体-node"><a href="#节点结构体-node" class="headerlink" title="节点结构体 node"></a>节点结构体 node</h2><p>节点结构体可以记录每个节点的信息，例如：节点位置、第一次访问到该节点所走的路径、第一次访问到该节点所需的步数等。<br>有时并不关注节点的具体信息，如判断迷宫是否有解时，如果访问到出口，便输出有解，所有节点均访问过还没访问到出口，便输出无解，不需要迷宫的走法，就没必要用结构体来描述节点。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//节点结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;    <span class="comment">//节点位置</span></span><br><span class="line">    <span class="keyword">int</span> step;   <span class="comment">//第一次访问到该节点所需步数</span></span><br><span class="line">    string s;   <span class="comment">//从第一个节点开始访问到该节点的过程，如&quot;下左下下&quot;</span></span><br><span class="line">    <span class="built_in">node</span>()&#123;&#125;;   <span class="comment">//构造函数，可以无参数生成节点</span></span><br><span class="line">    <span class="built_in">node</span>(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> step,string s):<span class="built_in">x</span>(x),<span class="built_in">y</span>(y),<span class="built_in">step</span>(step),<span class="built_in">s</span>(s)&#123;&#125;;    <span class="comment">//构造函数，可以带参数生成节点    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果只写一种构造函数，就不能用另一种构造函数来生成节点<br>带参数的构造函数可以方便操作，例如：<br>假设存在一个集合A,A.insert()可以把节点加入到A集合<br>那么可以直接通过A.insert(node(1,1,2,”下右”))把节点位置为(1,1),访问到该节点需要2步，访问的路径为”下右”(从左上方入口向下1格再向右1格)的节点加入集合A</p><h2 id="待访问节点队列-queue"><a href="#待访问节点队列-queue" class="headerlink" title="待访问节点队列 queue"></a>待访问节点队列 queue</h2><p>广度优先搜索是个循环过程，每次循环均会产生下次循环所需访问的节点的集合，下次循环时拿出这些节点依次访问，这个过程可以通过队列来实现：<br>第一次循环把入口节点加入队列，<br>如果队列不为空，从队列头弹出一个节点访问并标记，然后把该节点能访问到的节点送入队列尾，循环这个过程。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建队列</span></span><br><span class="line">queue&lt;node&gt; queue;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//BFS算法所需指令</span></span><br><span class="line"><span class="comment">//第一次搜索时，将左上角(0,0),访问所需步数为0，访问路径为空的入口节点加入队列</span></span><br><span class="line">queue.<span class="built_in">push</span>(<span class="built_in">node</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&quot;&quot;</span>))</span><br><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">    <span class="keyword">do</span> someting;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拿出队列头元素并弹出</span></span><br><span class="line">node a=q.<span class="built_in">front</span>();   <span class="comment">//将头元素赋值给a</span></span><br><span class="line">q.<span class="built_in">pop</span>();    <span class="comment">//弹出头元素</span></span><br></pre></td></tr></table></figure><h2 id="为方便而建立的数据"><a href="#为方便而建立的数据" class="headerlink" title="为方便而建立的数据"></a>为方便而建立的数据</h2><p>order字符串:方便路径字符串延伸</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//order</span></span><br><span class="line">string order=<span class="string">&quot;上下左右&quot;</span>;</span><br><span class="line">node now=queue.<span class="built_in">front</span>();</span><br><span class="line"><span class="comment">//访问入口下方第一个节点时</span></span><br><span class="line">string s=now.s+order[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>dir数组:方便位置的计算(direction)</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dir[][2]</span></span><br><span class="line">dir[][<span class="number">2</span>]=&#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">node now;</span><br><span class="line">now.x=<span class="number">0</span>;now.y=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//访问now节点的下方节点时</span></span><br><span class="line">x_next=now.x+dir[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">y_next=now.x+dir[<span class="number">1</span>][<span class="number">1</span>];</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
